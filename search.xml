<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构</title>
      <link href="2021/06/26/shu-ju-jie-gou/"/>
      <url>2021/06/26/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>带头节点的单循环链表</p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210625205224032.png" alt="image-20210625205224032" style="zoom:50%;"></p><h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210625205306687.png" alt="image-20210625205306687" style="zoom:50%;"></p><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface IStack&lt;T&gt; {</span><br><span class="line"><span class="keyword">void</span>clear();</span><br><span class="line">booleanisEmpty();</span><br><span class="line">intlength();</span><br><span class="line">Tpeek();<span class="comment">//返回栈顶的值，但不更改栈</span></span><br><span class="line"><span class="keyword">void</span>push(T x);</span><br><span class="line">Tpop();<span class="comment">//出栈，并返回栈顶的值</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface IQueue&lt;T&gt; {</span><br><span class="line"><span class="keyword">void</span> clear();</span><br><span class="line">booleanisEmpty();</span><br><span class="line">intlength();</span><br><span class="line">T peek();</span><br><span class="line"><span class="keyword">void</span> offer(T x);</span><br><span class="line">T poll();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="双向队列deque"><a href="#双向队列deque" class="headerlink" title="双向队列deque"></a>双向队列deque</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface IDeQue&lt;T&gt; {</span><br><span class="line"><span class="keyword">void</span> clear();</span><br><span class="line">booleanisEmpty();</span><br><span class="line">intlength();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> offerFirst(T x);</span><br><span class="line">T pollFirst();</span><br><span class="line">T peekFirst();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> offerLast(T x);</span><br><span class="line">T pollLast();</span><br><span class="line">T peekLast();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="空树也是二叉树"><a href="#空树也是二叉树" class="headerlink" title="空树也是二叉树"></a>空树也是二叉树</h5><figure class="highlight latex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">性质 1 ：在二叉树的第 i 层上至多有2<span class="built_in">^</span>i-1 个结点。(i≥1)</span><br><span class="line">性质 2 ：深度为 k 的二叉树上至多含 2<span class="built_in">^</span>k - 1 个结点（k≥1）</span><br><span class="line">性质 3 ：对任何一棵二叉树，若它含有n0个叶子结点、n2 个度为 2 的结点，则必存在关系式：n0= n2 + 1</span><br><span class="line">性质 4 ：具有 n 个结点的完全二叉树的深度为 ⎡ log2(n+1) ⎤</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="二叉树的存储方式两种"><a href="#二叉树的存储方式两种" class="headerlink" title="　二叉树的存储方式两种"></a>　二叉树的存储方式两种</h5><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210625211658752.png" alt="image-20210625211658752" style="zoom:50%;"></p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210625211713283.png" style="zoom:50%;"></p><h5 id="先序遍历（RLiRi）、后序遍历-LiRiR-、中序遍历-LiRRi"><a href="#先序遍历（RLiRi）、后序遍历-LiRiR-、中序遍历-LiRRi" class="headerlink" title="先序遍历（RLiRi）、后序遍历(LiRiR)、中序遍历(LiRRi)"></a>先序遍历（RLiRi）、后序遍历(LiRiR)、中序遍历(LiRRi)</h5><p>根据先序和中序推出二叉树长得如何</p><h5 id="树的顺序存储双亲表示法、链式法、邻接表（顺序＋链式存储）"><a href="#树的顺序存储双亲表示法、链式法、邻接表（顺序＋链式存储）" class="headerlink" title="树的顺序存储双亲表示法、链式法、邻接表（顺序＋链式存储）"></a>树的顺序存储双亲表示法、链式法、邻接表（顺序＋链式存储）</h5><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626082416188.png" alt="image-20210626082416188" style="zoom:50%;"></p><p>（双亲表示+邻接表连孩子）</p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626082448857.png" alt="image-20210626082448857" style="zoom:50%;"></p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626082241247.png" alt="image-20210626082241247" style="zoom: 50%;"></p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626082332314.png" alt="image-20210626082332314" style="zoom:50%;"></p><h4 id="6-1-图"><a href="#6-1-图" class="headerlink" title="6.1 图"></a>6.1 图</h4><h5 id="图的存储方式"><a href="#图的存储方式" class="headerlink" title="图的存储方式"></a>图的存储方式</h5><ol><li><img src="/2021/06/26/shu-ju-jie-gou/image-20210626083008624.png" alt="image-20210626083008624" style="zoom:50%;"></li><li><img src="/2021/06/26/shu-ju-jie-gou/image-20210626083023729.png" alt="image-20210626083023729" style="zoom:50%;"></li><li><img src="/2021/06/26/shu-ju-jie-gou/image-20210626083055302.png" alt="image-20210626083055302" style="zoom:50%;"></li><li><img src="/2021/06/26/shu-ju-jie-gou/image-20210626083145288.png" alt="image-20210626083145288" style="zoom:50%;"></li><li><img src="/2021/06/26/shu-ju-jie-gou/image-20210626083201057.png" alt="image-20210626083201057" style="zoom:50%;"></li><li><img src="/2021/06/26/shu-ju-jie-gou/image-20210626083221285.png" alt="image-20210626083221285" style="zoom:50%;"></li><li></li></ol><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626083313309.png" alt="image-20210626083313309" style="zoom:50%;"></p><h5 id="拓扑排序是有向无环图DAG（根据定义（选择入度为0的节点删除）或者可以通过dfs逆序求出栈实现）"><a href="#拓扑排序是有向无环图DAG（根据定义（选择入度为0的节点删除）或者可以通过dfs逆序求出栈实现）" class="headerlink" title="拓扑排序是有向无环图DAG（根据定义（选择入度为0的节点删除）或者可以通过dfs逆序求出栈实现）"></a>拓扑排序是有向无环图DAG（根据定义（选择入度为0的节点删除）或者可以通过dfs逆序求出栈实现）</h5><h4 id="7-1查找和二叉搜索树"><a href="#7-1查找和二叉搜索树" class="headerlink" title="7.1查找和二叉搜索树"></a>7.1查找和二叉搜索树</h4><ol><li><img src="/2021/06/26/shu-ju-jie-gou/image-20210626093915821.png" alt="image-20210626093915821" style="zoom: 67%;"></li></ol><p>2.</p><p>LL型二叉树平衡：右旋</p><p>LR型二叉树平衡：先左旋后右旋</p><p>RR型二叉树平衡：左旋</p><p>RL型二叉树平衡：先右旋后左旋</p><h5 id="哈希表"><a href="#哈希表" class="headerlink" title="　哈希表"></a>　哈希表</h5><ol><li><img src="/2021/06/26/shu-ju-jie-gou/image-20210626100425229.png" alt="image-20210626100425229" style="zoom:67%;"></li><li><img src="/2021/06/26/shu-ju-jie-gou/image-20210626100848101.png" alt="image-20210626100848101" style="zoom:67%;"></li></ol><p>线性探测再散列</p><p>（hash值+1）mod m</p><p>二次平方探测再散列</p><p>hash值$\pm n^2$ n=1、2、3…n</p><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><ol><li><p>插入排序（英语：Insertion sort）是一种简单直观的排序算法。它的工作原理为将待排列元素划分为“已排序”和“未排序”两部分，每次从“未排序的”元素中选择一个插入到“已排序的”元素中的正确位置。</p><p>一个与插入排序相同的操作是打扑克牌时，从牌桌上抓一张牌，按牌面大小插到手牌后，再抓下一张牌。</p></li><li><p>希尔排序是插入排序的改进，排序对不相邻的记录进行比较和移动：</p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626103804236.png" alt="image-20210626103804236" style="zoom:67%;"></p></li><li><p>选择排序（英语：Selection sort）是排序算法的一种，它的工作原理是每次找出第 i 小的元素（也就是 $A_i..A_n$ 中最小的元素），然后将这个元素与数组第 i个位置上的元素交换。</p></li><li><p>冒泡排序 它的工作原理是每次检查相邻两个元素，如果前面的元素与后面的元素满足给定的排序条件，就将相邻两个元素交换。当没有相邻的元素需要交换时，排序就完成了。</p></li></ol><p>5.快速排序</p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626104010208.png" alt="image-20210626104010208" style="zoom:67%;"></p><p><img src="/2021/06/26/shu-ju-jie-gou/mmexport1624688157358.jpg" alt="mmexport1624688157358"></p><p>6.归并排序</p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626104314805.png" alt="image-20210626104314805" style="zoom:67%;"></p><p>7.基数排序</p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626104521655.png" alt="image-20210626104521655" style="zoom:67%;"></p><p><img src="/2021/06/26/shu-ju-jie-gou/mmexport1624687995951.jpg" alt="mmexport1624687995951"></p><p>8.计数排序</p><p><img src="/2021/06/26/shu-ju-jie-gou/mmexport1624688099319.jpg" alt="mmexport1624688099319"></p><h6 id="run是有序序列"><a href="#run是有序序列" class="headerlink" title="run是有序序列"></a>run是有序序列</h6><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626104728515.png" alt="image-20210626104728515" style="zoom:67%;"></p><h5 id="胜者树是个完成二叉树"><a href="#胜者树是个完成二叉树" class="headerlink" title="胜者树是个完成二叉树"></a>胜者树是个完成二叉树</h5><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626111540074.png" alt="image-20210626111540074" style="zoom:67%;"></p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626111612567.png" alt="image-20210626111612567" style="zoom:67%;"></p><p>胜者树：结点记录每场比赛的获胜者。</p><p>败者树：结点记录每场比赛的失败者。</p><h5 id="优先队列二叉堆-堆排序"><a href="#优先队列二叉堆-堆排序" class="headerlink" title="优先队列二叉堆 堆排序"></a>优先队列二叉堆 堆排序</h5><ol><li><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626111736448.png" alt="image-20210626111736448" style="zoom:67%;"></p></li><li><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626112120810.png" alt="image-20210626112120810" style="zoom:67%;"></p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626112146177.png" alt="image-20210626112146177" style="zoom:67%;"></p></li><li><p>堆排序，先弄成堆</p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626112852062.png" alt="image-20210626112852062" style="zoom:67%;"></p></li></ol><p>然后<img src="/2021/06/26/shu-ju-jie-gou/image-20210626112924986.png" alt="image-20210626112924986" style="zoom:67%;"></p><h5 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h5><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626130240894.png" alt="image-20210626130240894" style="zoom:67%;"></p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626130403785.png" alt="image-20210626130403785" style="zoom:67%;"></p><h5 id="偶堆是满足堆条件的m叉树。"><a href="#偶堆是满足堆条件的m叉树。" class="headerlink" title="偶堆是满足堆条件的m叉树。"></a>偶堆是满足堆条件的m叉树。</h5><p>偶堆删除：将根结点的孩子结点从左到右两两合并，再从右往左逐一合并。</p><h5 id="最短路"><a href="#最短路" class="headerlink" title="　最短路"></a>　最短路</h5><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626142209102.png" alt="image-20210626142209102" style="zoom:67%;"></p><p>floyd</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= n; k++) {</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">      f[i][j] = min(f[i][j], f[i][k] + f[k][j]);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h5><p>Kruskal  并查集实现</p><p>prim</p><p><img src="/2021/06/26/shu-ju-jie-gou/image-20210626142500979.png" alt="image-20210626142500979" style="zoom:50%;"></p><p><img src="/2021/06/26/shu-ju-jie-gou/mst-1.gif" alt="mst-1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3599 Koishi Loves Construction</title>
      <link href="2021/03/11/p3599-koishi-loves-construction/"/>
      <url>2021/03/11/p3599-koishi-loves-construction/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://www.luogu.com.cn/problem/P3599">https://www.luogu.com.cn/problem/P3599</a></p><p>题解：</p><p><img src="/2021/03/11/p3599-koishi-loves-construction/1.png" alt=""></p><p>代码：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="comment">//#define lo</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">coutx</span><span class="params">(<span class="keyword">double</span> q, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//cout.setf(ios::fixed);</span></span><br><span class="line"><span class="comment">//cout.unsetf(ios::fixed);</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(x) &lt;&lt; q &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ksc</span><span class="params">(ll x, ll y, ll mod)</span><span class="comment">//快速乘</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> ( x * y - (ll) ( (<span class="keyword">long</span> <span class="keyword">double</span>) x / mod*y )*mod + mod ) % mod;</span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a/gcd(a,b)*b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> X, T;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(k); i ++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(k % i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">ll inv[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(n != <span class="number">4</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i ++)</span><br><span class="line">{</span><br><span class="line">inv[i] = (ll)((n - n / i) * inv[n % i]) % n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (i * inv[i - <span class="number">1</span>] + n) % n &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">4</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2 1 3 2 4"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> lo</span></span><br><span class="line"> freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"> freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; X &gt;&gt; T;</span><br><span class="line"><span class="keyword">if</span>(X == <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> a = n;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2 1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">2</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(b &lt;= n - <span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span> &lt;&lt; b;</span><br><span class="line">a -= <span class="number">2</span>;</span><br><span class="line">b += <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"> } </span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">4</span> || isprime(n))</span><br><span class="line">work();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>（一）一群小青蛙呱蹦呱蹦呱</title>
      <link href="2021/03/01/yi-qun-xiao-qing-wa-gu-beng-gu-beng-gu/"/>
      <url>2021/03/01/yi-qun-xiao-qing-wa-gu-beng-gu-beng-gu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>链接：<a href="https://ac.nowcoder.com/acm/contest/9981/J">https://ac.nowcoder.com/acm/contest/9981/J</a><br>来源：牛客网</p><p>有n个格子，每个格子里有一个数，1,2,3,4…n   </p><p>   牛牛放出<strong>无穷</strong>只青蛙。   </p><p>   第一只青蛙的路线是：1-&gt;2-&gt;4-&gt;8-&gt;16-&gt;….   </p><p>   第二只青蛙的路线是：1-&gt;3-&gt;9-&gt;27-&gt;81-&gt;….   </p><p>   第三只青蛙的路线是：1-&gt;5-&gt;25-&gt;125….   </p><p>   第四只青蛙的路线是：1-&gt;7-&gt;49……..   </p><p>   。。。。。。   </p><p>   用数学语言描述，第 i只青蛙的路线是首项为1，公比为p(i)的等比数列，其中p(i)代表第个素数。   </p><p>   当青蛙跳到一个格子上，如果这个格子上面有一个数，青蛙就会把这个数吃掉。   </p><p>   牛牛想知道，所有<strong>没有被</strong>吃掉的数的lcm（最小公倍数 ，Least common multiple）是多少？   </p><p>   由于这个lcm可能非常大，请输出它对10<sup>9</sup> + 7取模的值。</p><h4 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h4><p>一个整数n</p><p>1 &lt;= n &lt;= 1.6 * 10<sup>8</sup></p><h4 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h4><p>如果所有数都被吃掉了，请输出一个字符串”empty”</p><p>否则输出所有没有被吃掉的数的lcm，对模10<sup>9</sup> + 7</p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p><img src="/2021/03/01/yi-qun-xiao-qing-wa-gu-beng-gu-beng-gu/silu.png" style="zoom: 67%;"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mset(s, _) memset(s, _, sizeof(s))</span></span><br><span class="line"><span class="comment">//#define lo</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">coutx</span><span class="params">(<span class="keyword">double</span> q, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//cout.setf(ios::fixed);</span></span><br><span class="line"><span class="comment">//cout.unsetf(ios::fixed);</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(x) &lt;&lt; q &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ksc</span><span class="params">(ll x, ll y, ll mod)</span><span class="comment">//快速乘</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> ( x * y - (ll) ( (<span class="keyword">long</span> <span class="keyword">double</span>) x / mod*y )*mod + mod ) % mod;</span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a/gcd(a,b)*b;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod1 = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">8e7</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">bool</span> isprime[N];</span><br><span class="line">ll vis[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">//线性筛</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">isprime[<span class="number">0</span>] = isprime[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!isprime[i])vis[ ++ cnt] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * vis[j] &lt;= n; j ++)</span><br><span class="line">{</span><br><span class="line">isprime[i * vis[j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i % vis[j] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line">ll t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(t &lt;= m)</span><br><span class="line">{</span><br><span class="line">t *= n;</span><br><span class="line">res ++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> res - <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">poww</span><span class="params">(ll a, ll b)</span><span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ll ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>) </span><br><span class="line">ans = ksc(ans, a, mod1) % mod1;</span><br><span class="line">a = ksc(a, a, mod1) % mod1;</span><br><span class="line">a %= mod1;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">ans %= mod1;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans % mod1;</span><br><span class="line"> } </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> lo</span></span><br><span class="line"> freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"> freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n, cnt;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span>(n &lt;= <span class="number">5</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"empty"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">cnt = sieve(n / <span class="number">2</span>);</span><br><span class="line">ans = poww(<span class="number">2</span>, <span class="built_in">log</span>(<span class="number">2</span>, n / <span class="number">3</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= cnt; i ++)</span><br><span class="line">{</span><br><span class="line">ans = (ans % mod1) * poww(vis[i], <span class="built_in">log</span>(vis[i], n / <span class="number">2</span>));</span><br><span class="line">ans %= mod1;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans % mod1;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 编程算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喜欢</title>
      <link href="2020/12/22/xi-huan/"/>
      <url>2020/12/22/xi-huan/</url>
      
        <content type="html"><![CDATA[<ol><li><h5 id="喜欢女孩呢，不能犹豫，不能干等，也不能要脸，不然这个女孩就是别人的了。"><a href="#喜欢女孩呢，不能犹豫，不能干等，也不能要脸，不然这个女孩就是别人的了。" class="headerlink" title="喜欢女孩呢，不能犹豫，不能干等，也不能要脸，不然这个女孩就是别人的了。"></a><font color="Fuchsia">喜欢女孩呢，不能犹豫，不能干等，也不能要脸，不然这个女孩就是别人的了。</font></h5></li><li><font color="Fuchsia">我不是突然不喜欢你了，是因为你的每次逃跑，都把我一个人留在原地。</font></li><li><font color="Fuchsia">第一个阶段否定，第二个阶段愤怒，第三个阶段妥协和期待，第四个阶段吃醋</font></li></ol>]]></content>
      
      
      <categories>
          
          <category> 喜欢 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 喜欢 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
